"use strict";(self.webpackChunk_lckr_jupyterlab_variableinspector=self.webpackChunk_lckr_jupyterlab_variableinspector||[]).push([[803],{803:(e,n,t)=>{t.r(n),t.d(n,{default:()=>w});var r=t(578),s=t(53),a=t(840),i=t(167),o=t(865),c=t(901),_=t(92);class l{constructor(e){this._isDisposed=!1,this._disposed=new c.Signal(this),this._inspected=new c.Signal(this),this._rendermime=null,this._connector=e}get disposed(){return this._disposed}get isDisposed(){return this._isDisposed}get inspected(){return this._inspected}get rendermime(){return this._rendermime}dispose(){this.isDisposed||(this._isDisposed=!0,this._disposed.emit(),c.Signal.clearData(this))}performDelete(e){}}class p extends l{constructor(e){var n;super(e.connector),this._handleQueryResponse=e=>{switch(e.header.msg_type){case"execute_result":{let n=e.content.data["text/plain"];"'"!==n.slice(0,1)&&'"'!==n.slice(0,1)||(n=n.slice(1,-1),n=n.replace(/\\"/g,'"').replace(/\\'/g,"'"));const t=JSON.parse(n),r={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:r,payload:t});break}case"display_data":{let n=e.content.data["text/plain"];"'"!==n.slice(0,1)&&'"'!==n.slice(0,1)||(n=n.slice(1,-1),n=n.replace(/\\"/g,'"').replace(/\\'/g,"'"));const t=JSON.parse(n),r={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:r,payload:t});break}}},this._queryCall=(e,n)=>{switch(n.header.msg_type){case"execute_input":{const e=n.content.code;e===this._queryCommand||e===this._matrixQueryCommand||e.startsWith(this._widgetQueryCommand)||this.performInspection();break}}},this._id=e.id,this._rendermime=null!==(n=e.rendermime)&&void 0!==n?n:null,this._queryCommand=e.queryCommand,this._matrixQueryCommand=e.matrixQueryCommand,this._widgetQueryCommand=e.widgetQueryCommand,this._deleteCommand=e.deleteCommand,this._initScript=e.initScript,this._ready=this._connector.ready.then((()=>{this._initOnKernel().then((e=>{this._connector.iopubMessage.connect(this._queryCall)}))})),this._connector.kernelRestarted.connect(((e,n)=>{this._inspected.emit({title:{contextName:"<b>Restarting kernel...</b> "},payload:[]}),this._ready=n.then((()=>{this._initOnKernel().then((e=>{this._connector.iopubMessage.connect(this._queryCall),this.performInspection()}))}))}))}get id(){return this._id}get ready(){return this._ready}performInspection(){const e={code:this._queryCommand,stop_on_error:!1,store_history:!1};this._connector.fetch(e,this._handleQueryResponse)}performWidgetInspection(e){const n={code:this._widgetQueryCommand+"("+e+")",stop_on_error:!1,store_history:!1};return this._connector.execute(n)}performMatrixInspection(e,n=1e5){const t={code:this._matrixQueryCommand+"("+e+", "+n+")",stop_on_error:!1,store_history:!1},r=this._connector;return new Promise(((e,n)=>{r.fetch(t,(t=>{switch(t.header.msg_type){case"execute_result":{let n=t.content.data["text/plain"];n=n.replace(/^'|'$/g,""),n=n.replace(/\\"/g,'"'),n=n.replace(/\\'/g,"\\\\'");const r=JSON.parse(n),s=new _.JSONModel(r);e(s);break}case"error":console.log(t),n("Kernel error on 'matrixQuery' call!")}}))}))}performDelete(e){const n={code:this._deleteCommand+"('"+e+"')",stop_on_error:!1,store_history:!1};this._connector.fetch(n,this._handleQueryResponse)}_initOnKernel(){const e={code:this._initScript,stop_on_error:!1,silent:!0};return this._connector.fetch(e,(()=>{}))}}class d extends l{constructor(e){super(e)}performInspection(){const e={contextName:". <b>Language currently not supported.</b> ",kernelName:this._connector.kernelName||""};this._inspected.emit({title:e,payload:[]})}performMatrixInspection(e,n){return new Promise(((e,n)=>{n("Cannot inspect matrices w/ the DummyHandler!")}))}performWidgetInspection(e){return this._connector.execute({code:"",stop_on_error:!1,store_history:!1})}}class u{static getScript(e){return new Promise(((n,t)=>{e in u.scripts?n(u.scripts[e]):t("Language "+e+" not supported yet!")}))}}u.py_script='import json\nimport sys\nfrom importlib import __import__\nfrom IPython import get_ipython\nfrom IPython.core.magics.namespace import NamespaceMagics\n\n\n_jupyterlab_variableinspector_nms = NamespaceMagics()\n_jupyterlab_variableinspector_Jupyter = get_ipython()\n_jupyterlab_variableinspector_nms.shell = _jupyterlab_variableinspector_Jupyter.kernel.shell\n\n__np = None\n__pd = None\n__pyspark = None\n__tf = None\n__K = None\n__torch = None\n__ipywidgets = None\n__xr = None\n\n\ndef _attempt_import(module):\n    try:\n        return __import__(module)\n    except ImportError:\n        return None\n\n\ndef _check_imported():\n    global __np, __pd, __pyspark, __tf, __K, __torch, __ipywidgets, __xr\n\n    __np = _attempt_import(\'numpy\')\n    __pd = _attempt_import(\'pandas\')\n    __pyspark = _attempt_import(\'pyspark\')\n    __tf = _attempt_import(\'tensorflow\')\n    __K = _attempt_import(\'keras.backend\') or _attempt_import(\'tensorflow.keras.backend\')\n    __torch = _attempt_import(\'torch\')\n    __ipywidgets = _attempt_import(\'ipywidgets\')\n    __xr = _attempt_import(\'xarray\')\n\n\ndef _jupyterlab_variableinspector_getsizeof(x):\n    if type(x).__name__ in [\'ndarray\', \'Series\']:\n        return x.nbytes\n    elif __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return "?"\n    elif __tf and isinstance(x, __tf.Variable):\n        return "?"\n    elif __torch and isinstance(x, __torch.Tensor):\n        return x.element_size() * x.nelement()\n    elif __pd and type(x).__name__ == \'DataFrame\':\n        return x.memory_usage().sum()\n    else:\n        return sys.getsizeof(x)\n\n\ndef _jupyterlab_variableinspector_getshapeof(x):\n    if __pd and isinstance(x, __pd.DataFrame):\n        return "%d rows x %d cols" % x.shape\n    if __pd and isinstance(x, __pd.Series):\n        return "%d rows" % x.shape\n    if __np and isinstance(x, __np.ndarray):\n        shape = " x ".join([str(i) for i in x.shape])\n        return "%s" % shape\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return "? rows x %d cols" % len(x.columns)\n    if __tf and isinstance(x, __tf.Variable):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __tf and isinstance(x, __tf.Tensor):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __torch and isinstance(x, __torch.Tensor):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __xr and isinstance(x, __xr.DataArray):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if isinstance(x, list):\n        return "%s" % len(x)\n    if isinstance(x, dict):\n        return "%s keys" % len(x)\n    return None\n\n\ndef _jupyterlab_variableinspector_getcontentof(x):\n    # returns content in a friendly way for python variables\n    # pandas and numpy\n    if __pd and isinstance(x, __pd.DataFrame):\n        colnames = \', \'.join(x.columns.map(str))\n        content = "Columns: %s" % colnames\n    elif __pd and isinstance(x, __pd.Series):\n        content = str(x.values).replace(" ", ", ")[1:-1]\n        content = content.replace("\\n", "")\n    elif __np and isinstance(x, __np.ndarray):\n        content = x.__repr__()\n    elif __xr and isinstance(x, __xr.DataArray):\n        content = x.values.__repr__()\n    else:\n        content = str(x)\n\n    if len(content) > 150:\n        return content[:150] + " ..."\n    else:\n        return content\n\n\ndef _jupyterlab_variableinspector_is_matrix(x):\n    # True if type(x).__name__ in ["DataFrame", "ndarray", "Series"] else False\n    if __pd and isinstance(x, __pd.DataFrame):\n        return True\n    if __pd and isinstance(x, __pd.Series):\n        return True\n    if __np and isinstance(x, __np.ndarray) and len(x.shape) <= 2:\n        return True\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return True\n    if __tf and isinstance(x, __tf.Variable) and len(x.shape) <= 2:\n        return True\n    if __tf and isinstance(x, __tf.Tensor) and len(x.shape) <= 2:\n        return True\n    if __torch and isinstance(x, __torch.Tensor) and len(x.shape) <= 2:\n        return True\n    if __xr and isinstance(x, __xr.DataArray) and len(x.shape) <= 2:\n        return True\n    if isinstance(x, list):\n        return True\n    return False\n\n\ndef _jupyterlab_variableinspector_is_widget(x):\n    return __ipywidgets and issubclass(x, __ipywidgets.DOMWidget)\n\n\ndef _jupyterlab_variableinspector_dict_list():\n    _check_imported()\n    def keep_cond(v):\n        try:\n            obj = eval(v)\n            if isinstance(obj, str):\n                return True\n            if __tf and isinstance(obj, __tf.Variable):\n                return True\n            if __pd and __pd is not None and (\n                isinstance(obj, __pd.core.frame.DataFrame)\n                or isinstance(obj, __pd.core.series.Series)):\n                return True\n            if __xr and __xr is not None and isinstance(obj, __xr.DataArray):\n                return True\n            if str(obj)[0] == "<":\n                return False\n            if  v in [\'__np\', \'__pd\', \'__pyspark\', \'__tf\', \'__K\', \'__torch\', \'__ipywidgets\', \'__xr\']:\n                return obj is not None\n            if str(obj).startswith("_Feature"):\n                # removes tf/keras objects\n                return False\n            return True\n        except:\n            return False\n    values = _jupyterlab_variableinspector_nms.who_ls()\n    vardic = [\n        {\n            \'varName\': _v,\n            \'varType\': type(eval(_v)).__name__, \n            \'varSize\': str(_jupyterlab_variableinspector_getsizeof(eval(_v))), \n            \'varShape\': str(_jupyterlab_variableinspector_getshapeof(eval(_v))) if _jupyterlab_variableinspector_getshapeof(eval(_v)) else \'\', \n            \'varContent\': str(_jupyterlab_variableinspector_getcontentof(eval(_v))), \n            \'isMatrix\': _jupyterlab_variableinspector_is_matrix(eval(_v)),\n            \'isWidget\': _jupyterlab_variableinspector_is_widget(type(eval(_v)))\n        }\n        for _v in values if keep_cond(_v)\n    ]\n    return json.dumps(vardic, ensure_ascii=False)\n\n\ndef _jupyterlab_variableinspector_getmatrixcontent(x, max_rows=10000):\n    # to do: add something to handle this in the future\n    threshold = max_rows\n\n    if __pd and __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        df = x.limit(threshold).toPandas()\n        return _jupyterlab_variableinspector_getmatrixcontent(df.copy())\n    elif __np and __pd and type(x).__name__ == "DataFrame":\n        if threshold is not None:\n            x = x.head(threshold)\n        x.columns = x.columns.map(str)\n        return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == "Series":\n        if threshold is not None:\n            x = x.head(threshold)\n        return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == "ndarray":\n        df = __pd.DataFrame(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n        df = __K.get_value(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __torch and isinstance(x, __torch.Tensor):\n        df = x.cpu().numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __xr and isinstance(x, __xr.DataArray):\n        df = x.to_numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif isinstance(x, list):\n        s = __pd.Series(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(s)\n\n\ndef _jupyterlab_variableinspector_displaywidget(widget):\n    display(widget)\n\n\ndef _jupyterlab_variableinspector_default(o):\n    if isinstance(o, __np.number): return int(o)  \n    raise TypeError\n\n\ndef _jupyterlab_variableinspector_deletevariable(x):\n    exec("del %s" % x, globals())\n',u.r_script='library(repr)\n\n.ls.objects = function (pos = 1, pattern, order.by, decreasing = FALSE, head = FALSE, \n    n = 5) \n{\n    napply <- function(names, fn) sapply(names, function(x) fn(get(x, \n        pos = pos)))\n    names <- ls(pos = pos, pattern = pattern)\n    if (length(names) == 0) {\n        return(jsonlite::toJSON(data.frame()))\n    }\n    obj.class <- napply(names, function(x) as.character(class(x))[1])\n    obj.mode <- napply(names, mode)\n    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)\n    obj.size <- napply(names, object.size)\n    obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2]))\n    obj.content <- rep("NA", length(names))\n    has_no_dim <- is.na(obj.dim)[1:length(names)]                        \n    obj.dim[has_no_dim, 1] <- napply(names, length)[has_no_dim]\n    vec <- (obj.type != "function")\n    obj.content[vec] <- napply(names[vec], function(x) toString(x, width = 154)[1])\n                      \n    obj.rownames <- napply(names, rownames)\n    has_rownames <- obj.rownames != "NULL"\n    obj.rownames <- sapply(obj.rownames[has_rownames], function(x) paste(x,\n        collapse=", "))\n    obj.rownames.short <- sapply(obj.rownames, function(x) paste(substr(x, 1, 150), "...."))\n    obj.rownames <- ifelse(nchar(obj.rownames) > 154, obj.rownames.short, obj.rownames)\n    obj.rownames <- sapply(obj.rownames, function(x) paste("Row names: ",x))\n    obj.content[has_rownames] <- obj.rownames\n                               \n                               \n    obj.colnames <- napply(names, colnames)\n    has_colnames <- obj.colnames != "NULL"\n    obj.colnames <- sapply(obj.colnames[has_colnames], function(x) paste(x, \n        collapse = ", "))\n    obj.colnames.short <- sapply(obj.colnames, function(x) paste(substr(x, \n        1, 150), "...."))\n    obj.colnames <- ifelse(nchar(obj.colnames) > 154, obj.colnames.short, \n        obj.colnames)\n    obj.colnames <- sapply(obj.colnames, function(x) paste("Column names: ",x))\n                    \n    obj.content[has_colnames] <- obj.colnames\n                           \n    is_function <- (obj.type == "function")\n    obj.content[is_function] <- napply(names[is_function], function(x) paste(strsplit(repr_text(x),")")[[1]][1],")",sep=""))\n    obj.content <- unlist(obj.content, use.names = FALSE)\n    \n\n    out <- data.frame(obj.type, obj.size, obj.dim)\n    names(out) <- c("varType", "varSize", "Rows", "Columns")\n    out$varShape <- paste(out$Rows, " x ", out$Columns)\n    out$varContent <- obj.content\n    out$isMatrix <- FALSE\n    out$varName <- row.names(out)\n    out <- out[, !(names(out) %in% c("Rows", "Columns"))]\n    rownames(out) <- NULL\n    print(out)\n    if (!missing(order.by)) \n        out <- out[order(out[[order.by]], decreasing = decreasing), \n            ]\n    if (head) \n        out <- head(out, n)\n    jsonlite::toJSON(out)\n}\n\n.deleteVariable <- function(x) {\n    remove(list=c(x), envir=.GlobalEnv)\n}\n    ',u.scripts={python3:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},python2:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},python:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},R:{initScript:u.r_script,queryCommand:".ls.objects()",matrixQueryCommand:".ls.objects",widgetQueryCommand:"TODO",deleteCommand:".deleteVariable"},scala:{initScript:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.init()",queryCommand:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.dictList()",matrixQueryCommand:"",widgetQueryCommand:"",deleteCommand:""}};class m{constructor(e){this._kernelRestarted=new c.Signal(this),this._session=e.session,this._session.statusChanged.connect(((e,n)=>{switch(n){case"restarting":case"autorestarting":this._kernelRestarted.emit(this._session.ready)}}))}get kernelRestarted(){return this._kernelRestarted}get kernelLanguage(){var e;return(null===(e=this._session.session)||void 0===e?void 0:e.kernel)?this._session.session.kernel.info.then((e=>e.language_info.name)):Promise.resolve("")}get kernelName(){return this._session.kernelDisplayName}get ready(){return this._session.ready}get iopubMessage(){return this._session.iopubMessage}fetch(e,n){var t;const r=null===(t=this._session.session)||void 0===t?void 0:t.kernel;if(!r)return Promise.reject(new Error("Require kernel to perform variable inspection!"));const s=r.requestExecute(e);return s.onIOPub=e=>{n(e)},s.done}execute(e){var n;if(!(null===(n=this._session.session)||void 0===n?void 0:n.kernel))throw new Error("No session available.");return this._session.session.kernel.requestExecute(e)}}class h{constructor(){this._source=null,this._panel=null,this._handlers={}}hasHandler(e){return!!this._handlers[e]}getHandler(e){return this._handlers[e]}addHandler(e){this._handlers[e.id]=e}get panel(){return this._panel}set panel(e){this.panel!==e&&(this._panel=e,e&&!e.source&&(e.source=this._source))}get source(){return this._source}set source(e){this._source!==e&&(this._source&&this._source.disposed.disconnect(this._onSourceDisposed,this),this._source=e,this._panel&&!this._panel.isDisposed&&(this._panel.source=this._source),this._source&&this._source.disposed.connect(this._onSourceDisposed,this))}_onSourceDisposed(){this._source=null}}var b,y=t(908),x=t(778);class f extends x.Widget{constructor(){super(),this._source=null,this.addClass("jp-VarInspector"),this._title=b.createTitle(),this._title.className="jp-VarInspector-title",this._table=b.createTable(),this._table.className="jp-VarInspector-table",this.node.appendChild(this._title),this.node.appendChild(this._table)}get source(){return this._source}set source(e){this._source!==e&&(this._source&&(this._source.inspected.disconnect(this.onInspectorUpdate,this),this._source.disposed.disconnect(this.onSourceDisposed,this)),this._source=e,this._source&&(this._source.inspected.connect(this.onInspectorUpdate,this),this._source.disposed.connect(this.onSourceDisposed,this),this._source.performInspection()))}dispose(){this.isDisposed||(this.source=null,super.dispose())}onInspectorUpdate(e,n){var t;if(!this.isAttached)return;const r=n.title,s=n.payload;let a;r.contextName?this._title.innerHTML=r.contextName:this._title.innerHTML="    Inspecting '"+r.kernelName+"' "+r.contextName,this._table.deleteTFoot(),this._table.createTFoot(),this._table.tFoot.className="jp-VarInspector-content";for(let e=0;e<s.length;e++){const n=s[e],r=n.varName,i=n.varType;a=this._table.tFoot.insertRow();let c=a.insertCell(0);c.title="Delete Variable",c.className="jp-VarInspector-deleteButton";const _=o.closeIcon.element();if(_.onclick=e=>{var n;null===(n=this.source)||void 0===n||n.performDelete(r)},c.append(_),c=a.insertCell(1),n.isMatrix){c.title="View Contents",c.className="jp-VarInspector-inspectButton";const e=o.searchIcon.element();e.onclick=e=>{var n;console.log("Click on "+r),null===(n=this._source)||void 0===n||n.performMatrixInspection(r).then((e=>{this._showMatrix(e,r,i)}))},c.append(e)}else c.innerHTML="";c=a.insertCell(2),c.className="jp-VarInspector-varName",c.innerHTML=r,c=a.insertCell(3),c.innerHTML=i,c=a.insertCell(4),c.innerHTML=n.varSize,c=a.insertCell(5),c.innerHTML=n.varShape,c=a.insertCell(6);const l=null===(t=this._source)||void 0===t?void 0:t.rendermime;if(n.isWidget&&l){const e=new y.OutputAreaModel({trusted:!0}),t=new y.SimplifiedOutputArea({model:e,rendermime:l});t.future=this._source.performWidgetInspection(n.varName),x.Widget.attach(t,c)}else c.innerHTML=b.escapeHtml(n.varContent).replace(/\\n/g,"</br>")}}onSourceDisposed(e,n){this.source=null}_showMatrix(e,n,t){const r=new _.DataGrid({defaultSizes:{rowHeight:32,columnWidth:128,rowHeaderWidth:64,columnHeaderHeight:32}});r.dataModel=e,r.title.label=t+": "+n,r.title.closable=!0,this.parent.layout.addWidget(r,{mode:"split-right"})}}!function(e){const n=new Map(Object.entries({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"}));e.escapeHtml=function(e){return String(e).replace(/[&<>"'/]/g,(e=>n.get(e)))},e.createTable=function(){const e=document.createElement("table");e.createTHead();const n=e.tHead.insertRow(0);return n.insertCell(0).innerHTML="",n.insertCell(1).innerHTML="",n.insertCell(2).innerHTML="Name",n.insertCell(3).innerHTML="Type",n.insertCell(4).innerHTML="Size",n.insertCell(5).innerHTML="Shape",n.insertCell(6).innerHTML="Content",e},e.createTitle=function(e=""){const n=document.createElement("p");return n.innerHTML=e,n}}(b||(b={}));var g=t(930);const v=new g.Token("jupyterlab_extension/variableinspector:IVariableInspectorManager");var j;new g.Token("jupyterlab_extension/variableinspector:IVariableInspector"),function(e){e.open="variableinspector:open"}(j||(j={}));const w=[{id:"@lckr/jupyterlab_variableinspector",requires:[r.ICommandPalette,s.ILayoutRestorer,s.ILabShell],provides:v,autoStart:!0,activate:(e,n,t,s)=>{const a=new h,i=j.open,c=new r.WidgetTracker({namespace:"variableinspector"});return t.restore(c,{command:i,args:()=>({}),name:()=>"variableinspector"}),e.commands.addCommand(i,{label:"Open Variable Inspector",execute:()=>{a.panel&&!a.panel.isDisposed||(a.panel=function(){const e=new f;return e.id="jp-variableinspector",e.title.label="Variable Inspector",e.title.icon=o.listIcon,e.title.closable=!0,e.disposed.connect((()=>{a.panel===e&&(a.panel=null)})),c.add(e),e}()),a.panel.isAttached||s.add(a.panel,"main"),a.source&&a.source.performInspection(),s.activateById(a.panel.id)}}),n.addItem({command:i,category:"Variable Inspector"}),console.log("JupyterLab extension @lckr/jupyterlab_variableinspector is activated!"),a}},{id:"@lckr/jupyterlab-variableinspector:consoles",requires:[v,a.IConsoleTracker,s.ILabShell],autoStart:!0,activate:(e,n,t,r)=>{const s={};t.widgetAdded.connect(((e,t)=>{n.hasHandler(t.sessionContext.path)?s[t.id]=new Promise(((e,r)=>{e(n.getHandler(t.sessionContext.path))})):s[t.id]=new Promise(((e,r)=>{const a=t.sessionContext,i=new m({session:a}),o=i.ready.then((()=>i.kernelLanguage.then((e=>u.getScript(e)))));o.then((r=>{const o=r.initScript,c={queryCommand:r.queryCommand,matrixQueryCommand:r.matrixQueryCommand,widgetQueryCommand:r.widgetQueryCommand,deleteCommand:r.deleteCommand,connector:i,initScript:o,id:a.path},_=new p(c);n.addHandler(_),t.disposed.connect((()=>{delete s[t.id],_.dispose()})),_.ready.then((()=>{e(_)}))})),o.catch((n=>{console.log(n);const r=new d(i);t.disposed.connect((()=>{delete s[t.id],r.dispose()})),e(r)}))})),a(r)}));const a=(e,r)=>{var a;const i=null!==(a=null==r?void 0:r.newValue)&&void 0!==a?a:e.currentWidget;i&&t.has(i)&&s[i.id].then((e=>{e&&(n.source=e,n.source.performInspection())}))};a(r),r.currentChanged.connect(a),e.contextMenu.addItem({command:j.open,selector:".jp-CodeConsole"})}},{id:"@lckr/jupyterlab-variableinspector:notebooks",requires:[v,i.INotebookTracker,s.ILabShell],autoStart:!0,activate:(e,n,t,r)=>{const s={};t.widgetAdded.connect(((e,t)=>{s[t.id]=new Promise(((e,r)=>{const a=t.sessionContext,i=new m({session:a}),o=t.content.rendermime,c=i.ready.then((async()=>{const e=await i.kernelLanguage;return u.getScript(e)}));c.then((r=>{const c=r.initScript,_={queryCommand:r.queryCommand,matrixQueryCommand:r.matrixQueryCommand,widgetQueryCommand:r.widgetQueryCommand,deleteCommand:r.deleteCommand,connector:i,rendermime:o,initScript:c,id:a.path},l=new p(_);n.addHandler(l),t.disposed.connect((()=>{delete s[t.id],l.dispose()})),l.ready.then((()=>{e(l)}))})),c.catch((e=>{r(e)}))})),a(r)}));const a=(e,r)=>{var a;const i=null!==(a=null==r?void 0:r.newValue)&&void 0!==a?a:e.currentWidget;if(!i||!t.has(i)||i.isDisposed)return;const o=s[i.id];null==o||o.then((e=>{e&&(n.source=e,n.source.performInspection())}))};a(r),r.currentChanged.connect(a),e.contextMenu.addItem({command:j.open,selector:".jp-Notebook"})}}]}}]);